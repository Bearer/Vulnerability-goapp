package main

import (
	"fmt"
	"log"
	"net/http"
	"strings"
	"text/template"
)

func isZeroString(formstr []string)bool{
		if len(formstr)==0{
				return true
		}
		return false
}

func outErrorPage(w http.ResponseWriter){
		t, _ := template.ParseFiles("./views/error.gtpl")
		t.Execute(w,nil)
}

func sayYourName(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()
	fmt.Println(r.Form)
	fmt.Println("path", r.URL.Path)
	fmt.Println("scheme", r.URL.Scheme)
	fmt.Println("r.Form", r.Form)
	fmt.Println("r.Form[name]", r.Form["name"])
	var Name string
	for k, v := range r.Form {
		fmt.Println("key:", k)
		Name = strings.Join(v, ",")
	}
	fmt.Println(Name)
	fmt.Fprintf(w, Name)
}

func login(w http.ResponseWriter, r *http.Request) {
	fmt.Println("method ", r.Method)
	if r.Method == "GET" {
		t, _ := template.ParseFiles("./views/login.gtpl")
		t.Execute(w, nil)
	} else {
		r.ParseForm()
		if isZeroString(r.Form["username"]){
				fmt.Println("username", r.Form["username"])
		}else{
				fmt.Println("username is empty")
				outErrorPage(w)
		}

		if isZeroString(r.Form["passwd"]){
				fmt.Println("passwd", r.Form["passwd"])
		}else{
				fmt.Println("passwd is empty")
				outErrorPage(w)
		}
	}
}

func main() {
	http.HandleFunc("/", sayYourName)
	http.HandleFunc("/login", login)
	err := http.ListenAndServe(":9090", nil)
	if err != nil {
		log.Fatal("ListenAndServe: ", err)
	}
}
