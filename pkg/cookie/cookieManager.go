package cookie

import (
	"database/sql"
	"encoding/base64"
	"errors"
	"fmt"
	"log"
	"net/http"
)

func CheckCookieOnlyLogin(r *http.Request) (userNameCookie string, sessionIDCookie string, err error) {
	userName, err := r.Cookie("UserName")
	if err != nil {
		fmt.Println(err)
	}

	sessionID, err := r.Cookie("SessionID")
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(userName, sessionID)

	if userName.Value == "" && sessionID.Value == "" {
		return "", "", errors.New("Cookie not exsit")
	} else {
		return userName.Value, sessionID.Value, nil
	}
}

func GetUserIDFromCookie(r *http.Request) (userNameCookie string, sessionIDCookie string, userIDCookie int, err error) {
	userName, err := r.Cookie("UserName")
	if err != nil {
		fmt.Println(err)
	}

	sessionID, err := r.Cookie("SessionID")
	if err != nil {
		fmt.Println(err)
	}

	if userName.Value == "" && sessionID.Value == "" {
		return "", "", 0, errors.New("not exist cookie")
	} else {
		decodeMail, err := base64.StdEncoding.DecodeString(sessionID.Value)
		if err != nil {
			fmt.Println(err)
		}
		mail := string(decodeMail)
		fmt.Println(mail)

		db, err := sql.Open("mysql", "root:rootwolf@tcp(mysql)/vulnapp")
		if err != nil {
			log.Fatal(err)
		}
		defer db.Close()

		var userID int
		if err := db.QueryRow("select id from user where mail=?", mail).Scan(&userID); err != nil {
			log.Fatal(err)
		}

		log.Println(userID)
		return userName.Value, sessionID.Value, userID, nil
	}
}
